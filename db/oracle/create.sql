CREATE TABLE U_DEPT 
(
   ID                   INTEGER              NOT NULL,
   PARENT_ID            INTEGER,
   DEPT_NAME            VARCHAR2(200),
   DEPT_CODE            VARCHAR2(50),
   STATUS               VARCHAR2(2),
   CONSTRAINT PK_U_DEPT PRIMARY KEY (ID)
);

COMMENT ON TABLE U_DEPT IS
'部门表';

COMMENT ON COLUMN U_DEPT.ID IS
'id';

COMMENT ON COLUMN U_DEPT.PARENT_ID IS
'上级部门id';

COMMENT ON COLUMN U_DEPT.DEPT_NAME IS
'部门名称';

COMMENT ON COLUMN U_DEPT.DEPT_CODE IS
'部门编码';

COMMENT ON COLUMN U_DEPT.STATUS IS
'部门状态';

ALTER TABLE U_DEPT
   ADD CONSTRAINT FK_U_DEPT_REFERENCE_U_DEPT FOREIGN KEY (PARENT_ID)
      REFERENCES U_DEPT (ID);

      CREATE TABLE U_USER 
(
   ID                   INTEGER              NOT NULL,
   DEPT_ID              INTEGER,
   DEPT_NAME            VARCHAR2(200) ,
   LOGIN_NAME           VARCHAR2(45)         NOT NULL,
   LOGIN_PASS           VARCHAR2(45)         NOT NULL,
   EMP_CODE             VARCHAR2(45),
   NAME                 VARCHAR2(45)         NOT NULL,
   SEX                  VARCHAR2(2)          NOT NULL,
   TELEPHONE            VARCHAR2(15),
   MOBILE               VARCHAR2(15),
   EMAIL                VARCHAR2(45)         NOT NULL,
   NATIVE_PLACE         VARCHAR2(10),
   STATUS               VARCHAR2(2)          NOT NULL,
   DEL_FLAG             VARCHAR2(2),
   REMARK               VARCHAR2(200),
   CREATED_TIME         DATE,
   CREATED_USER_ID      INTEGER,
   CREATED_USER_NAME    VARCHAR2(45),
   UPDATED_TIME         DATE,
   UPDATED_USER_ID      INTEGER,
   UPDATED_USER_NAME    VARCHAR2(45),
   PWD_CHANGE_TIME      DATE,
   CONSTRAINT PK_U_USER PRIMARY KEY (ID),
   CONSTRAINT AK_KEY_2_U_USER UNIQUE (LOGIN_NAME)
);

COMMENT ON TABLE U_USER IS
'系统用户表';

COMMENT ON COLUMN U_USER.ID IS
'id';

COMMENT ON COLUMN U_USER.DEPT_ID IS
'部门id';

COMMENT ON COLUMN U_USER.DEPT_NAME IS
'部门名称(冗余)';

COMMENT ON COLUMN U_USER.LOGIN_NAME IS
'登录名称';

COMMENT ON COLUMN U_USER.LOGIN_PASS IS
'登录密码';

COMMENT ON COLUMN U_USER.EMP_CODE IS
'员工编号';

COMMENT ON COLUMN U_USER.NAME IS
'姓名';

COMMENT ON COLUMN U_USER.SEX IS
'M:男,W:女';

COMMENT ON COLUMN U_USER.TELEPHONE IS
'联系电话';

COMMENT ON COLUMN U_USER.MOBILE IS
'移动电话';

COMMENT ON COLUMN U_USER.EMAIL IS
'email';

COMMENT ON COLUMN U_USER.NATIVE_PLACE IS
'JP:日本,CN:中国';

COMMENT ON COLUMN U_USER.STATUS IS
'状态:A:有效,D:无效';

COMMENT ON COLUMN U_USER.DEL_FLAG IS
'删除状态';

COMMENT ON COLUMN U_USER.REMARK IS
'备注';

COMMENT ON COLUMN U_USER.CREATED_TIME IS
'创建时间';

COMMENT ON COLUMN U_USER.CREATED_USER_ID IS
'创建人ID';

COMMENT ON COLUMN U_USER.CREATED_USER_NAME IS
'创建人名称';

COMMENT ON COLUMN U_USER.UPDATED_TIME IS
'修改时间';

COMMENT ON COLUMN U_USER.UPDATED_USER_ID IS
'修改人ID';

COMMENT ON COLUMN U_USER.UPDATED_USER_NAME IS
'修改人名称';

COMMENT ON COLUMN U_USER.PWD_CHANGE_TIME IS
'密码修改时间';

ALTER TABLE U_USER
   ADD CONSTRAINT FK_U_USER_REFERENCE_U_DEPT FOREIGN KEY (DEPT_ID)
      REFERENCES U_DEPT (ID);

      CREATE TABLE U_ROLE 
(
   ID                   INTEGER              NOT NULL,
   ROLE_NAME            VARCHAR2(45)         NOT NULL,
   ROLE_Code            VARCHAR2(45)         ,
   REMARK               VARCHAR2(200),
   STATUS               VARCHAR2(2)          NOT NULL,
   CREATED_TIME         DATE,
   CREATED_USER_ID      INTEGER,
   CREATED_USER_NAME    VARCHAR2(45),
   UPDATED_TIME         DATE,
   UPDATED_USER_ID      INTEGER,
   UPDATED_USER_NAME    VARCHAR2(45),
   CONSTRAINT PK_U_ROLE PRIMARY KEY (ID),
   CONSTRAINT AK_KEY_2_U_ROLE UNIQUE (ROLE_NAME)
);

COMMENT ON TABLE U_ROLE IS
'角色表';

COMMENT ON COLUMN U_ROLE.ID IS
'id';

COMMENT ON COLUMN U_ROLE.ROLE_NAME IS
'角色名称';

COMMENT ON COLUMN U_ROLE.REMARK IS
'备注';

COMMENT ON COLUMN U_ROLE.STATUS IS
'A:有效,D:无效';

COMMENT ON COLUMN U_ROLE.CREATED_TIME IS
'创建时间';

COMMENT ON COLUMN U_ROLE.CREATED_USER_ID IS
'创建人ID';

COMMENT ON COLUMN U_ROLE.CREATED_USER_NAME IS
'创建人名称';

COMMENT ON COLUMN U_ROLE.UPDATED_TIME IS
'修改时间';

COMMENT ON COLUMN U_ROLE.UPDATED_USER_ID IS
'修改人ID';

COMMENT ON COLUMN U_ROLE.UPDATED_USER_NAME IS
'修改人名称';

CREATE TABLE U_DEPT_USER 
(
   ID                   INTEGER              NOT NULL,
   DEPT_ID              INTEGER,
   USER_ID              INTEGER,
   CONSTRAINT PK_U_DEPT_USER PRIMARY KEY (ID)
);

COMMENT ON TABLE U_DEPT_USER IS
'部门用户表';

COMMENT ON COLUMN U_DEPT_USER.ID IS
'id';

COMMENT ON COLUMN U_DEPT_USER.DEPT_ID IS
'dept_id';

COMMENT ON COLUMN U_DEPT_USER.USER_ID IS
'user_id';

ALTER TABLE U_DEPT_USER
   ADD CONSTRAINT FK_U_DEPT_U_REFERENCE_U_DEPT FOREIGN KEY (DEPT_ID)
      REFERENCES U_DEPT (ID);

ALTER TABLE U_DEPT_USER
   ADD CONSTRAINT FK_U_DEPT_U_REFERENCE_U_USER FOREIGN KEY (USER_ID)
      REFERENCES U_USER (ID);


CREATE TABLE U_USER_ROLE 
(
   ID                   INTEGER              NOT NULL,
   USER_ID              INTEGER         NOT NULL,
   ROLE_ID              INTEGER         NOT NULL,
   CREATED_TIME         DATE,
   CREATED_USER_ID      INTEGER,
   CREATED_USER_NAME    VARCHAR2(45),
   UPDATED_TIME         DATE,
   UPDATED_USER_ID      INTEGER,
   UPDATED_USER_NAME    VARCHAR2(45),
   CONSTRAINT PK_U_USER_ROLE PRIMARY KEY (ID)
);

COMMENT ON TABLE U_USER_ROLE IS
'用户角色关系表';

COMMENT ON COLUMN U_USER_ROLE.ID IS
'id';

COMMENT ON COLUMN U_USER_ROLE.USER_ID IS
'user_id';

COMMENT ON COLUMN U_USER_ROLE.ROLE_ID IS
'role_id';

COMMENT ON COLUMN U_USER_ROLE.CREATED_TIME IS
'创建时间';

COMMENT ON COLUMN U_USER_ROLE.CREATED_USER_ID IS
'创建人ID';

COMMENT ON COLUMN U_USER_ROLE.CREATED_USER_NAME IS
'创建人名称';

COMMENT ON COLUMN U_USER_ROLE.UPDATED_TIME IS
'修改时间';

COMMENT ON COLUMN U_USER_ROLE.UPDATED_USER_ID IS
'修改人ID';

COMMENT ON COLUMN U_USER_ROLE.UPDATED_USER_NAME IS
'修改人名称';

/*==============================================================*/
/* Index: RELATIONSHIP_1_FK                                     */
/*==============================================================*/
CREATE INDEX RELATIONSHIP_1_FK ON U_USER_ROLE (
   USER_ID ASC
);

/*==============================================================*/
/* Index: RELATIONSHIP_2_FK                                     */
/*==============================================================*/
CREATE INDEX RELATIONSHIP_2_FK ON U_USER_ROLE (
   ROLE_ID ASC
);

ALTER TABLE U_USER_ROLE
   ADD CONSTRAINT FK_U_USER_R_RELATIONS_U_USER FOREIGN KEY (USER_ID)
      REFERENCES U_USER (ID);

ALTER TABLE U_USER_ROLE
   ADD CONSTRAINT FK_U_USER_R_RELATIONS_U_ROLE FOREIGN KEY (ROLE_ID)
      REFERENCES U_ROLE (ID);
      
CREATE TABLE U_RESOURCE 
(
   ID                   INTEGER              NOT NULL,
   RESOURCE_NAME        VARCHAR2(45)         NOT NULL,
   URI                  VARCHAR2(200)        NOT NULL,
   RESOURCE_TYPE        VARCHAR2(2),
   REMARK               VARCHAR2(200),
   CREATED_TIME         DATE,
   CREATED_USER_ID      INTEGER,
   CREATED_USER_NAME    VARCHAR2(45),
   UPDATED_TIME         DATE,
   UPDATED_USER_ID      INTEGER,
   UPDATED_USER_NAME    VARCHAR2(45),
   CONSTRAINT PK_U_RESOURCE PRIMARY KEY (ID)
);

COMMENT ON TABLE U_RESOURCE IS
'资源表';

COMMENT ON COLUMN U_RESOURCE.ID IS
'id';

COMMENT ON COLUMN U_RESOURCE.RESOURCE_NAME IS
'资源名称';

COMMENT ON COLUMN U_RESOURCE.URI IS
'uri';

COMMENT ON COLUMN U_RESOURCE.RESOURCE_TYPE IS
'资源类型';

COMMENT ON COLUMN U_RESOURCE.REMARK IS
'备注';

COMMENT ON COLUMN U_RESOURCE.CREATED_TIME IS
'创建时间';

COMMENT ON COLUMN U_RESOURCE.CREATED_USER_ID IS
'创建人ID';

COMMENT ON COLUMN U_RESOURCE.CREATED_USER_NAME IS
'创建人名称';

COMMENT ON COLUMN U_RESOURCE.UPDATED_TIME IS
'修改时间';

COMMENT ON COLUMN U_RESOURCE.UPDATED_USER_ID IS
'修改人ID';

COMMENT ON COLUMN U_RESOURCE.UPDATED_USER_NAME IS
'修改人名称';

CREATE TABLE U_SCREEN 
(
   ID                   INTEGER              NOT NULL,
   PARENT_ID            INTEGER,
   SCREEN_NAME          VARCHAR2(45)         NOT NULL,
   NORMAL_CSS           VARCHAR2(45),
   HOT_KEY_CSS          VARCHAR2(45),
   OPEN_TYPE            VARCHAR2(2),
   RESOURCE_ID          INTEGER,
   SORT_NUM             INTEGER,
   STATUS               VARCHAR2(2),
   REMARK               VARCHAR2(200),
   CREATED_TIME         DATE,
   CREATED_USER_ID      INTEGER,
   CREATED_USER_NAME    VARCHAR2(45),
   UPDATED_TIME         DATE,
   UPDATED_USER_ID      INTEGER,
   UPDATED_USER_NAME    VARCHAR2(45),
   CONSTRAINT PK_U_SCREEN PRIMARY KEY (ID)
);

COMMENT ON TABLE U_SCREEN IS
'系统菜单画面表';

COMMENT ON COLUMN U_SCREEN.ID IS
'id';

COMMENT ON COLUMN U_SCREEN.PARENT_ID IS
'上级画面';

COMMENT ON COLUMN U_SCREEN.SCREEN_NAME IS
'菜单名称';

COMMENT ON COLUMN U_SCREEN.NORMAL_CSS IS
'正常样式';

COMMENT ON COLUMN U_SCREEN.HOT_KEY_CSS IS
'快捷键样式';

COMMENT ON COLUMN U_SCREEN.OPEN_TYPE IS
'打开方式:D(默认方式),I(iframe方式),N(新开窗口)';

COMMENT ON COLUMN U_SCREEN.RESOURCE_ID IS
'此资源ID只能在画面对应的权限集合中进行选择(直接对应的画面，不是子画面)';

COMMENT ON COLUMN U_SCREEN.SORT_NUM IS
'排序';

COMMENT ON COLUMN U_SCREEN.STATUS IS
'状态,A:有效,D:禁用';

COMMENT ON COLUMN U_SCREEN.REMARK IS
'备注';

COMMENT ON COLUMN U_SCREEN.CREATED_TIME IS
'创建时间';

COMMENT ON COLUMN U_SCREEN.CREATED_USER_ID IS
'创建人ID';

COMMENT ON COLUMN U_SCREEN.CREATED_USER_NAME IS
'创建人名称';

COMMENT ON COLUMN U_SCREEN.UPDATED_TIME IS
'修改时间';

COMMENT ON COLUMN U_SCREEN.UPDATED_USER_ID IS
'修改人ID';

COMMENT ON COLUMN U_SCREEN.UPDATED_USER_NAME IS
'修改人名称';

/*==============================================================*/
/* Index: RELATIONSHIP_3_FK                                     */
/*==============================================================*/
CREATE INDEX RELATIONSHIP_3_FK ON U_SCREEN (
   PARENT_ID ASC
);

ALTER TABLE U_SCREEN
   ADD CONSTRAINT FK_U_SCREEN_RELATIONS_U_SCREEN FOREIGN KEY (PARENT_ID)
      REFERENCES U_SCREEN (ID);
CREATE TABLE U_AUTHENTICATION 
(
   ID                   INTEGER              NOT NULL,
   SCREEN_ID            INTEGER              NOT NULL,
   AUTH_NAME            VARCHAR2(45)         NOT NULL,
   AUTH_CODE            VARCHAR2(45)         NOT NULL,
   REMARK               VARCHAR2(200),
   CREATED_TIME         DATE,
   CREATED_USER_ID      INTEGER,
   CREATED_USER_NAME    VARCHAR2(45),
   UPDATED_TIME         DATE,
   UPDATED_USER_ID      INTEGER,
   UPDATED_USER_NAME    VARCHAR2(45),
   CONSTRAINT PK_U_AUTHENTICATION PRIMARY KEY (ID),
   CONSTRAINT AK_KEY_2_U_AUTHEN UNIQUE (AUTH_CODE)
);

COMMENT ON TABLE U_AUTHENTICATION IS
'权限集合表';

COMMENT ON COLUMN U_AUTHENTICATION.ID IS
'id';

COMMENT ON COLUMN U_AUTHENTICATION.SCREEN_ID IS
'screen_id';

COMMENT ON COLUMN U_AUTHENTICATION.AUTH_NAME IS
'权限名称';

COMMENT ON COLUMN U_AUTHENTICATION.AUTH_CODE IS
'权限编码';

COMMENT ON COLUMN U_AUTHENTICATION.REMARK IS
'备注';

COMMENT ON COLUMN U_AUTHENTICATION.CREATED_TIME IS
'创建时间';

COMMENT ON COLUMN U_AUTHENTICATION.CREATED_USER_ID IS
'创建人ID';

COMMENT ON COLUMN U_AUTHENTICATION.CREATED_USER_NAME IS
'创建人名称';

COMMENT ON COLUMN U_AUTHENTICATION.UPDATED_TIME IS
'修改时间';

COMMENT ON COLUMN U_AUTHENTICATION.UPDATED_USER_ID IS
'修改人ID';

COMMENT ON COLUMN U_AUTHENTICATION.UPDATED_USER_NAME IS
'修改人名称';

/*==============================================================*/
/* Index: RELATIONSHIP_7_FK                                     */
/*==============================================================*/
CREATE INDEX RELATIONSHIP_7_FK ON U_AUTHENTICATION (
   SCREEN_ID ASC
);

ALTER TABLE U_AUTHENTICATION
   ADD CONSTRAINT FK_U_AUTHEN_RELATIONS_U_SCREEN FOREIGN KEY (SCREEN_ID)
      REFERENCES U_SCREEN (ID);
CREATE TABLE U_ROLE_SCREEN 
(
   ID                   INTEGER              NOT NULL,
   ROLE_ID              INTEGER              NOT NULL,
   SCREEN_ID            INTEGER              NOT NULL,
   CREATED_TIME         DATE,
   CREATED_USER_ID      INTEGER,
   CREATED_USER_NAME    VARCHAR2(45),
   UPDATED_TIME         DATE,
   UPDATED_USER_ID      INTEGER,
   UPDATED_USER_NAME    VARCHAR2(45),
   CONSTRAINT PK_U_ROLE_SCREEN PRIMARY KEY (ID)
);

COMMENT ON TABLE U_ROLE_SCREEN IS
'角色菜单画面关系表';

COMMENT ON COLUMN U_ROLE_SCREEN.ID IS
'id';

COMMENT ON COLUMN U_ROLE_SCREEN.ROLE_ID IS
'role_id';

COMMENT ON COLUMN U_ROLE_SCREEN.SCREEN_ID IS
'screen_id';

COMMENT ON COLUMN U_ROLE_SCREEN.CREATED_TIME IS
'创建时间';

COMMENT ON COLUMN U_ROLE_SCREEN.CREATED_USER_ID IS
'创建人ID';

COMMENT ON COLUMN U_ROLE_SCREEN.CREATED_USER_NAME IS
'创建人名称';

COMMENT ON COLUMN U_ROLE_SCREEN.UPDATED_TIME IS
'修改时间';

COMMENT ON COLUMN U_ROLE_SCREEN.UPDATED_USER_ID IS
'修改人ID';

COMMENT ON COLUMN U_ROLE_SCREEN.UPDATED_USER_NAME IS
'修改人名称';

/*==============================================================*/
/* Index: RELATIONSHIP_4_FK                                     */
/*==============================================================*/
CREATE INDEX RELATIONSHIP_4_FK ON U_ROLE_SCREEN (
   ROLE_ID ASC
);

/*==============================================================*/
/* Index: RELATIONSHIP_5_FK                                     */
/*==============================================================*/
CREATE INDEX RELATIONSHIP_5_FK ON U_ROLE_SCREEN (
   SCREEN_ID ASC
);

ALTER TABLE U_ROLE_SCREEN
   ADD CONSTRAINT FK_U_ROLE_S_RELATIONS_U_ROLE FOREIGN KEY (ROLE_ID)
      REFERENCES U_ROLE (ID);

ALTER TABLE U_ROLE_SCREEN
   ADD CONSTRAINT FK_U_ROLE_S_RELATIONS_U_SCREEN FOREIGN KEY (SCREEN_ID)
      REFERENCES U_SCREEN (ID);
CREATE TABLE U_ROLE_AUTHENTICATION 
(
   ID                   INTEGER              NOT NULL,
   ROLE_ID              INTEGER              NOT NULL,
   AUTHENTICATION_ID    INTEGER              NOT NULL,
   CREATED_TIME         DATE,
   CREATED_USER_ID      INTEGER,
   CREATED_USER_NAME    VARCHAR2(45),
   UPDATED_TIME         DATE,
   UPDATED_USER_ID      INTEGER,
   UPDATED_USER_NAME    VARCHAR2(45),
   CONSTRAINT PK_U_ROLE_AUTHENTICATION PRIMARY KEY (ID)
);

COMMENT ON TABLE U_ROLE_AUTHENTICATION IS
'角色权限关系表';

COMMENT ON COLUMN U_ROLE_AUTHENTICATION.ID IS
'id';

COMMENT ON COLUMN U_ROLE_AUTHENTICATION.ROLE_ID IS
'role_id';

COMMENT ON COLUMN U_ROLE_AUTHENTICATION.AUTHENTICATION_ID IS
'authentication_id';

COMMENT ON COLUMN U_ROLE_AUTHENTICATION.CREATED_TIME IS
'创建时间';

COMMENT ON COLUMN U_ROLE_AUTHENTICATION.CREATED_USER_ID IS
'创建人ID';

COMMENT ON COLUMN U_ROLE_AUTHENTICATION.CREATED_USER_NAME IS
'创建人名称';

COMMENT ON COLUMN U_ROLE_AUTHENTICATION.UPDATED_TIME IS
'修改时间';

COMMENT ON COLUMN U_ROLE_AUTHENTICATION.UPDATED_USER_ID IS
'修改人ID';

COMMENT ON COLUMN U_ROLE_AUTHENTICATION.UPDATED_USER_NAME IS
'修改人名称';

/*==============================================================*/
/* Index: RELATIONSHIP_8_FK                                     */
/*==============================================================*/
CREATE INDEX RELATIONSHIP_8_FK ON U_ROLE_AUTHENTICATION (
   ROLE_ID ASC
);

/*==============================================================*/
/* Index: RELATIONSHIP_9_FK                                     */
/*==============================================================*/
CREATE INDEX RELATIONSHIP_9_FK ON U_ROLE_AUTHENTICATION (
   AUTHENTICATION_ID ASC
);

ALTER TABLE U_ROLE_AUTHENTICATION
   ADD CONSTRAINT FK_U_ROLE_A_RELATIONS_U_ROLE FOREIGN KEY (ROLE_ID)
      REFERENCES U_ROLE (ID);

ALTER TABLE U_ROLE_AUTHENTICATION
   ADD CONSTRAINT FK_U_ROLE_A_RELATIONS_U_AUTHEN FOREIGN KEY (AUTHENTICATION_ID)
      REFERENCES U_AUTHENTICATION (ID);

      CREATE TABLE U_AUTHENTICATION_RESOURCE 
(
   ID                   INTEGER              NOT NULL,
   AUTHENTICATION_ID    INTEGER              NOT NULL,
   RESOURCE_ID          INTEGER              NOT NULL,
   CREATED_TIME         DATE,
   CREATED_USER_ID      INTEGER,
   CREATED_USER_NAME    VARCHAR2(45),
   UPDATED_TIME         DATE,
   UPDATED_USER_ID      INTEGER,
   UPDATED_USER_NAME    VARCHAR2(45),
   CONSTRAINT PK_U_AUTHENTICATION_RESOURCE PRIMARY KEY (ID)
);

COMMENT ON TABLE U_AUTHENTICATION_RESOURCE IS
'权限资源关系表';

COMMENT ON COLUMN U_AUTHENTICATION_RESOURCE.ID IS
'id';

COMMENT ON COLUMN U_AUTHENTICATION_RESOURCE.AUTHENTICATION_ID IS
'authentication_id';

COMMENT ON COLUMN U_AUTHENTICATION_RESOURCE.RESOURCE_ID IS
'resource_id';

COMMENT ON COLUMN U_AUTHENTICATION_RESOURCE.CREATED_TIME IS
'创建时间';

COMMENT ON COLUMN U_AUTHENTICATION_RESOURCE.CREATED_USER_ID IS
'创建人ID';

COMMENT ON COLUMN U_AUTHENTICATION_RESOURCE.CREATED_USER_NAME IS
'创建人名称';

COMMENT ON COLUMN U_AUTHENTICATION_RESOURCE.UPDATED_TIME IS
'修改时间';

COMMENT ON COLUMN U_AUTHENTICATION_RESOURCE.UPDATED_USER_ID IS
'修改人ID';

COMMENT ON COLUMN U_AUTHENTICATION_RESOURCE.UPDATED_USER_NAME IS
'修改人名称';

/*==============================================================*/
/* Index: RELATIONSHIP_6_FK                                     */
/*==============================================================*/
CREATE INDEX RELATIONSHIP_6_FK ON U_AUTHENTICATION_RESOURCE (
   AUTHENTICATION_ID ASC
);

/*==============================================================*/
/* Index: RELATIONSHIP_10_FK                                    */
/*==============================================================*/
CREATE INDEX RELATIONSHIP_10_FK ON U_AUTHENTICATION_RESOURCE (
   RESOURCE_ID ASC
);

ALTER TABLE U_AUTHENTICATION_RESOURCE
   ADD CONSTRAINT FK_U_AUTHEN_RELATIONS_U_RESOUR FOREIGN KEY (RESOURCE_ID)
      REFERENCES U_RESOURCE (ID);

ALTER TABLE U_AUTHENTICATION_RESOURCE
   ADD CONSTRAINT FK_U_AUTHEN_RELATIONS_U_AUTHEN FOREIGN KEY (AUTHENTICATION_ID)
      REFERENCES U_AUTHENTICATION (ID);

CREATE TABLE LOG_LOGIN 
(
   ID                   INTEGER              NOT NULL,
   USER_ID              INTEGER,
   LOGIN_NAME           VARCHAR2(45)         NOT NULL,
   LOGIN_IP             VARCHAR2(45)         NOT NULL,
   CLIENT_PLATFORM      VARCHAR2(45),
   CLIENT_DEVICE_ID     VARCHAR2(45),
   CREATED_TIME         DATE,
   QUIT_TIME            DATE,
   CONSTRAINT PK_LOG_LOGIN PRIMARY KEY (ID)
);

COMMENT ON TABLE LOG_LOGIN IS
'登录日志表';

COMMENT ON COLUMN LOG_LOGIN.ID IS
'id';

COMMENT ON COLUMN LOG_LOGIN.USER_ID IS
'用户id';

COMMENT ON COLUMN LOG_LOGIN.LOGIN_NAME IS
'登录名称';

COMMENT ON COLUMN LOG_LOGIN.LOGIN_IP IS
'登录IP';

COMMENT ON COLUMN LOG_LOGIN.CLIENT_PLATFORM IS
'客户端平台';

COMMENT ON COLUMN LOG_LOGIN.CLIENT_DEVICE_ID IS
'客户端设备id';

COMMENT ON COLUMN LOG_LOGIN.CREATED_TIME IS
'登录时间';

COMMENT ON COLUMN LOG_LOGIN.QUIT_TIME IS
'退出时间';

ALTER TABLE LOG_LOGIN
   ADD CONSTRAINT FK_LOG_LOGI_REFERENCE_U_USER FOREIGN KEY (USER_ID)
      REFERENCES U_USER (ID);


CREATE TABLE U_MESSAGE (
	ID INTEGER NOT NULL ,
	TITLE NVARCHAR2(100) NULL ,
	RELEASE_TIME DATE NULL ,
	RELEASE_USER_ID NUMBER NULL ,
	RELEASE_USER_NAME NVARCHAR2(45) NULL ,
	CONTENT NVARCHAR2(1000) NULL ,
	MSG_TYPE NVARCHAR2(2) NULL ,
	STATUS NVARCHAR2(2) NULL ,
	CREATED_TIME DATE NULL ,
	CREATED_USER_ID NUMBER NULL ,
	CREATED_USER_NAME NVARCHAR2(45) NULL ,
	UPDATED_TIME DATE NULL ,
	UPDATED_USER_ID NUMBER NULL ,
	UPDATED_USER_NAME NVARCHAR2(45) NULL 
);

-- ----------------------------
-- Table structure for U_MESSAGE_NOTIFY_USER
-- ----------------------------
CREATE TABLE U_MESSAGE_NOTIFY_USER (
	ID INTEGER NOT NULL ,
	MESSAGE_ID NUMBER NULL ,
	MESSAGE_READ_ID NUMBER NULL ,
	USER_ID NUMBER NULL ,
	NOTIFY_TIME DATE NULL ,
	CREATED_TIME DATE NULL ,
	CREATED_USER_ID NUMBER NULL ,
	CREATED_USER_NAME NVARCHAR2(45) NULL 
);

-- ----------------------------
-- Table structure for U_MESSAGE_READ
-- ----------------------------
CREATE TABLE U_MESSAGE_READ (
	ID INTEGER NOT NULL ,
	USER_ID NUMBER NULL ,
	MESSAGE_ID NUMBER NULL ,
	MSG_TYPE NVARCHAR2(2) NULL ,
	STATUS NVARCHAR2(2) NULL ,
	CREATED_TIME DATE NULL ,
	CREATED_USER_ID NUMBER NULL ,
	CREATED_USER_NAME NVARCHAR2(45) NULL 
)
;

-- ----------------------------
-- Indexes structure for table U_MESSAGE
-- ----------------------------

-- ----------------------------
-- Checks structure for table U_MESSAGE
-- ----------------------------
ALTER TABLE U_MESSAGE ADD CHECK (ID IS NOT NULL);
ALTER TABLE U_MESSAGE ADD CHECK (ID IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table U_MESSAGE
-- ----------------------------
ALTER TABLE U_MESSAGE ADD PRIMARY KEY (ID);

-- ----------------------------
-- Indexes structure for table U_MESSAGE_NOTIFY_USER
-- ----------------------------

-- ----------------------------
-- Checks structure for table U_MESSAGE_NOTIFY_USER
-- ----------------------------
ALTER TABLE U_MESSAGE_NOTIFY_USER ADD CHECK (ID IS NOT NULL);
ALTER TABLE U_MESSAGE_NOTIFY_USER ADD CHECK (ID IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table U_MESSAGE_NOTIFY_USER
-- ----------------------------
ALTER TABLE U_MESSAGE_NOTIFY_USER ADD PRIMARY KEY (ID);

-- ----------------------------
-- Indexes structure for table U_MESSAGE_READ
-- ----------------------------

-- ----------------------------
-- Checks structure for table U_MESSAGE_READ
-- ----------------------------
ALTER TABLE U_MESSAGE_READ ADD CHECK (ID IS NOT NULL);
ALTER TABLE U_MESSAGE_READ ADD CHECK (ID IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table U_MESSAGE_READ
-- ----------------------------
ALTER TABLE U_MESSAGE_READ ADD PRIMARY KEY (ID);

-- ----------------------------
-- Foreign Key structure for table U_MESSAGE_READ
-- ----------------------------
ALTER TABLE U_MESSAGE_READ ADD FOREIGN KEY (MESSAGE_ID) REFERENCES U_MESSAGE (ID);
ALTER TABLE U_MESSAGE_READ ADD FOREIGN KEY (USER_ID) REFERENCES U_USER (ID);


CREATE TABLE COM_MAIL_TEMPLATE
(
   ID                 INTEGER              NOT NULL,
   TEMPLATE_NAME      VARCHAR2(50),
   STATUS             VARCHAR2(2),
   REMARK             VARCHAR2(200),
   CREATED_TIME       DATE,
   CREATED_USER_ID    INTEGER,
   CREATED_USER_NAME  VARCHAR2(45),
   UPDATED_TIME       DATE,
   UPDATED_USER_ID    INTEGER,
   UPDATED_USER_NAME  VARCHAR2(45),
   CONSTRAINT PK_COM_MAIL_TEMPLATE PRIMARY KEY (ID)
);

COMMENT ON TABLE COM_MAIL_TEMPLATE IS
'邮件模版表';

COMMENT ON COLUMN COM_MAIL_TEMPLATE.ID IS
'主键';

COMMENT ON COLUMN COM_MAIL_TEMPLATE.TEMPLATE_NAME IS
'模版名字';

COMMENT ON COLUMN COM_MAIL_TEMPLATE.STATUS IS
'状态:A:有效,D:无效';

COMMENT ON COLUMN COM_MAIL_TEMPLATE.REMARK IS
'备注';

COMMENT ON COLUMN COM_MAIL_TEMPLATE.CREATED_TIME IS
'创建时间';

COMMENT ON COLUMN COM_MAIL_TEMPLATE.CREATED_USER_ID IS
'创建人ID';

COMMENT ON COLUMN COM_MAIL_TEMPLATE.CREATED_USER_NAME IS
'创建人名称';

COMMENT ON COLUMN COM_MAIL_TEMPLATE.UPDATED_TIME IS
'修改时间';

COMMENT ON COLUMN COM_MAIL_TEMPLATE.UPDATED_USER_ID IS
'修改人ID';

COMMENT ON COLUMN COM_MAIL_TEMPLATE.UPDATED_USER_NAME IS
'修改人名称';

CREATE TABLE COM_DICTIONARY 
(
   ID                   INTEGER              NOT NULL,
   TYPE_CODE            VARCHAR2(128),
   DICTIONARY_NAME      VARCHAR2(128),
   DICTIONARY_CODE      VARCHAR2(128),
   DICTIONARY_VALUE     VARCHAR2(128),
   STATUS               VARCHAR2(2),
   SORT_NUM             INTEGER,
   REMARK               VARCHAR2(200),
   CREATED_TIME         DATE,
   CREATED_USER_ID      INTEGER,
   CREATED_USER_NAME    VARCHAR2(45),
   UPDATED_TIME         DATE,
   UPDATED_USER_ID      INTEGER,
   UPDATED_USER_NAME    VARCHAR2(45),
   CONSTRAINT PK_COM_DICTIONARY PRIMARY KEY (ID)
);

COMMENT ON TABLE COM_DICTIONARY IS
'系统字典表';

COMMENT ON COLUMN COM_DICTIONARY.ID IS
'id';

COMMENT ON COLUMN COM_DICTIONARY.TYPE_CODE IS
'字典类型编码';

COMMENT ON COLUMN COM_DICTIONARY.DICTIONARY_NAME IS
'字典名称';

COMMENT ON COLUMN COM_DICTIONARY.DICTIONARY_CODE IS
'字典code';

COMMENT ON COLUMN COM_DICTIONARY.DICTIONARY_VALUE IS
'字典值';

COMMENT ON COLUMN COM_DICTIONARY.STATUS IS
'状态:A:有效,D:无效';

COMMENT ON COLUMN COM_DICTIONARY.SORT_NUM IS
'排序数字';

COMMENT ON COLUMN COM_DICTIONARY.REMARK IS
'备注';

COMMENT ON COLUMN COM_DICTIONARY.CREATED_TIME IS
'创建时间';

COMMENT ON COLUMN COM_DICTIONARY.CREATED_USER_ID IS
'创建人ID';

COMMENT ON COLUMN COM_DICTIONARY.CREATED_USER_NAME IS
'创建人名称';

COMMENT ON COLUMN COM_DICTIONARY.UPDATED_TIME IS
'修改时间';

COMMENT ON COLUMN COM_DICTIONARY.UPDATED_USER_ID IS
'修改人ID';

COMMENT ON COLUMN COM_DICTIONARY.UPDATED_USER_NAME IS
'修改人名称';

CREATE TABLE COM_ATTACHMENT 
(
   ID                   INTEGER              NOT NULL,
   KEY_CODE             VARCHAR2(16),
   FILE_NAME            VARCHAR2(500),
   FILE_PATH            VARCHAR2(500),
   FILE_TYPE            VARCHAR2(16),
   FILE_SIZE            NUMBER(10,0),
   DEL_FLAG             VARCHAR2(2),
   EXT_PARAMS           VARCHAR2(500),
   CREATED_TIME         DATE,
   CREATED_USER_ID      INTEGER,
   CREATED_USER_NAME    VARCHAR2(45),
   CONSTRAINT PK_COM_ATTACHMENT PRIMARY KEY (ID)
);

COMMENT ON TABLE COM_ATTACHMENT IS
'上传文件附件表';

COMMENT ON COLUMN COM_ATTACHMENT.ID IS
'主健';

COMMENT ON COLUMN COM_ATTACHMENT.KEY_CODE IS
'默认值N';

COMMENT ON COLUMN COM_ATTACHMENT.FILE_NAME IS
'上传附件名称';

COMMENT ON COLUMN COM_ATTACHMENT.FILE_PATH IS
'上传文件相对路径';

COMMENT ON COLUMN COM_ATTACHMENT.FILE_TYPE IS
'文件类型(文件后缀小写)';

COMMENT ON COLUMN COM_ATTACHMENT.FILE_SIZE IS
'文件大小';

COMMENT ON COLUMN COM_ATTACHMENT.DEL_FLAG IS
'文件是否删除:1:是,0:否,默认0';

COMMENT ON COLUMN COM_ATTACHMENT.EXT_PARAMS IS
'扩展参数，如果有值，保存为json格式';

COMMENT ON COLUMN COM_ATTACHMENT.CREATED_TIME IS
'创建时间';

COMMENT ON COLUMN COM_ATTACHMENT.CREATED_USER_ID IS
'创建人ID';

COMMENT ON COLUMN COM_ATTACHMENT.CREATED_USER_NAME IS
'创建人名称';

CREATE TABLE LOG_IMPORT_DATA 
(
   ID                   INTEGER              NOT NULL,
   EXECUTOR             VARCHAR2(128)        NOT NULL,
   DATA_FILE            VARCHAR2(256)        NOT NULL,
   RESULT               VARCHAR2(2),
   ERROR_FILE           VARCHAR2(256),
   CREATED_TIME         DATE,
   CREATED_USER_ID      INTEGER,
   CREATED_USER_NAME    VARCHAR2(45),
   CONSTRAINT PK_LOG_IMPORT_DATA PRIMARY KEY (ID)
);

COMMENT ON TABLE LOG_IMPORT_DATA IS
'通用导入日志表';

COMMENT ON COLUMN LOG_IMPORT_DATA.ID IS
'id';

COMMENT ON COLUMN LOG_IMPORT_DATA.EXECUTOR IS
'解析bean';

COMMENT ON COLUMN LOG_IMPORT_DATA.DATA_FILE IS
'数据文件';

COMMENT ON COLUMN LOG_IMPORT_DATA.RESULT IS
'1:导入成功,0:导入失败';

COMMENT ON COLUMN LOG_IMPORT_DATA.ERROR_FILE IS
'错误文件路径';

COMMENT ON COLUMN LOG_IMPORT_DATA.CREATED_TIME IS
'创建时间';

COMMENT ON COLUMN LOG_IMPORT_DATA.CREATED_USER_ID IS
'创建人ID';

COMMENT ON COLUMN LOG_IMPORT_DATA.CREATED_USER_NAME IS
'创建人名称';

